/* The following code was generated by JFlex 1.6.1 */

 /*
 * Copyright 2017 Alessandro Falappa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 /*
 * Based on Java Properties lexer found on https://upsource.jetbrains.com/idea-ce/file/idea-ce-083f663c71f761cb0cb398a2d5ae4a42163507d1/plugins/properties/src/com/intellij/lang/properties/parsing/Properties.flex
 */
package com.github.alexfalappa.nbspringboot.cfgprops.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>/home/sasha/Sviluppo/gitrepos/nb-springboot/src/main/jflex/BootCfgProperties.flex</tt>
 */
class CfgPropsScanner {

    /** This character denotes the end of file */
    public static final int YYEOF = LexerInput.EOF;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int IN_VALUE = 2;
    public static final int IN_KEY = 4;
    public static final int IN_KEY_INDEX = 6;
    public static final int IN_KEY_VALUE_SEPARATOR_HEAD = 8;
    public static final int IN_KEY_VALUE_SEPARATOR_TAIL = 10;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical
     * state l at the beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\11\1\7\1\0"
            + "\1\7\12\0\1\12\1\0\1\15\11\16\1\10\2\0\1\10\35\0"
            + "\1\13\1\6\1\14\47\0\1\1\u1fa2\0\1\1\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\6\0\1\1\1\2\1\3\1\4\1\3\2\5\1\6"
            + "\1\5\1\3\2\6\1\7\1\2\1\10\1\11\1\12"
            + "\1\13\1\3\2\14\1\2\1\0\1\1\1\0\1\5"
            + "\1\15\1\0\1\13\1\16";

    private static int[] zzUnpackAction() {
        int[] result = new int[36];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\17\0\36\0\55\0\74\0\113\0\132\0\151"
            + "\0\170\0\207\0\226\0\245\0\264\0\303\0\322\0\341"
            + "\0\151\0\360\0\226\0\377\0\226\0\226\0\226\0\u010e"
            + "\0\u011d\0\u010e\0\u012c\0\u013b\0\170\0\u014a\0\341\0\u0159"
            + "\0\u0168\0\u011d\0\u0177\0\u0186";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[36];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\2\7\4\10\1\11\1\12\1\13\1\10\3\13\2\7"
            + "\1\14\1\15\2\16\1\17\1\16\1\20\2\14\1\17"
            + "\5\14\2\7\1\21\1\22\1\10\1\21\1\11\1\12"
            + "\1\23\1\24\1\25\1\26\1\27\2\7\2\30\1\21"
            + "\1\22\1\10\1\21\1\31\1\13\1\23\1\24\2\13"
            + "\1\27\1\32\1\33\1\14\1\15\2\16\1\10\1\16"
            + "\1\20\1\14\1\23\1\24\6\14\1\15\2\16\1\10"
            + "\1\16\1\20\2\14\1\34\5\14\2\7\4\0\1\35"
            + "\6\0\2\7\2\0\4\10\3\0\1\10\5\0\3\7"
            + "\1\36\13\7\2\12\2\0\13\12\17\0\2\14\2\0"
            + "\1\14\1\0\1\37\12\14\2\16\1\15\1\16\1\37"
            + "\2\14\1\15\5\14\2\0\4\16\3\0\1\16\5\0"
            + "\2\14\2\10\1\17\1\10\1\37\2\14\1\17\10\14"
            + "\1\40\13\14\2\0\1\21\3\10\3\0\1\10\7\0"
            + "\2\10\1\41\1\10\3\0\1\10\5\0\2\30\4\0"
            + "\1\42\6\0\5\30\1\43\15\30\4\0\1\42\6\0"
            + "\2\33\2\0\2\10\1\44\1\10\3\0\1\10\5\0"
            + "\3\7\3\0\1\35\6\0\2\7\3\14\1\0\1\14"
            + "\1\0\1\37\10\14\2\0\4\10\3\0\1\24\5\0"
            + "\3\30\3\0\1\42\6\0\2\30\2\0\4\10\3\0"
            + "\1\34\5\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[405];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\6\0\4\1\1\11\7\1\1\11\1\1\3\11\5\1"
            + "\1\0\1\1\1\0\2\1\1\0\2\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[36];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF = false;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a lead/high surrogate has been read from the input
     * stream into the final zzBuffer position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    private StateStack stack = new StateStack();

    private LexerInput input;

    public CfgPropsScanner(LexerRestartInfo info) {
        this.input = info.input();
        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState {

        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                    && (this.zzState == state.zzState)
                    && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
        stack.pushStack(getZZLexicalState());
        yybegin(state);
    }

    /* end user code */
    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    CfgPropsScanner(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 90) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return input.readText().toString();
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return input.readText().charAt(pos);
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return input.readLength();
    }

    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method will only
     * be called with things that "Can't Possibly Happen". If this method is called, something is seriously wrong (e.g. a JFlex
     * bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        input.backup(number);
        //zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public CfgPropsTokenId nextTokenId() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        //int zzCurrentPosL;
        //int zzMarkedPosL;
        //int zzEndReadL = zzEndRead;
        //char [] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            //zzMarkedPosL = zzMarkedPos;

            // commented following line after generation
            //yychar+= zzMarkedPosL-zzStartRead;
            zzAction = -1;

            //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            int tokenLength = 0;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {
                    zzInput = input.read();

                    if (zzInput == LexerInput.EOF) {
                        //end of input reached
                        zzInput = YYEOF;
                        break zzForAction;
                        //notice: currently LexerInput.EOF == YYEOF
                    }

                    // commented following block after generation
                    /*
                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                     */
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        tokenLength = input.readLength();
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            if (zzInput != YYEOF) {
                input.backup(input.readLength() - tokenLength);
            }

            if (zzInput == YYEOF) {
                //zzAtEOF = true;
                {
                    if (input.readLength() > 0) {
                        // backup eof
                        input.backup(1);
                        //and return the text as error token
                        return CfgPropsTokenId.ERROR;
                    } else {
                        return null;
                    }
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        yybegin(IN_KEY);
                        return CfgPropsTokenId.KEY;
                    }
                    case 15:
                        break;
                    case 2: {
                        return CfgPropsTokenId.WHITESPACE;
                    }
                    case 16:
                        break;
                    case 3: {
                        return CfgPropsTokenId.ERROR;
                    }
                    case 17:
                        break;
                    case 4: {
                        yybegin(YYINITIAL);
                        return CfgPropsTokenId.COMMENT;
                    }
                    case 18:
                        break;
                    case 5: {
                        yybegin(YYINITIAL);
                        return CfgPropsTokenId.VALUE;
                    }
                    case 19:
                        break;
                    case 6: {
                        yybegin(YYINITIAL);
                        return CfgPropsTokenId.WHITESPACE;
                    }
                    case 20:
                        break;
                    case 7: {
                        yybegin(IN_KEY_VALUE_SEPARATOR_TAIL);
                        return CfgPropsTokenId.SEPARATOR;
                    }
                    case 21:
                        break;
                    case 8: {
                        yybegin(IN_KEY);
                        return CfgPropsTokenId.DOT;
                    }
                    case 22:
                        break;
                    case 9: {
                        yybegin(IN_KEY_INDEX);
                        return CfgPropsTokenId.BRACKET;
                    }
                    case 23:
                        break;
                    case 10: {
                        yybegin(IN_KEY);
                        return CfgPropsTokenId.BRACKET;
                    }
                    case 24:
                        break;
                    case 11: {
                        yybegin(IN_KEY_INDEX);
                        return CfgPropsTokenId.MAP_KEY;
                    }
                    case 25:
                        break;
                    case 12: {
                        yybegin(IN_KEY_INDEX);
                        return CfgPropsTokenId.ARRAY_IDX;
                    }
                    case 26:
                        break;
                    case 13: {
                        yybegin(IN_KEY_VALUE_SEPARATOR_HEAD);
                        return CfgPropsTokenId.WHITESPACE;
                    }
                    case 27:
                        break;
                    case 14: {
                        yybegin(IN_KEY_VALUE_SEPARATOR_TAIL);
                        return CfgPropsTokenId.WHITESPACE;
                    }
                    case 28:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
